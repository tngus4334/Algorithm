# (())()
# 1. ( 괄호열림  stack =["("]
# 2. ( ( 괄호 또열림 stack =["(","("]
# 3. ) 괄호가 닫혔다! 그러면 아까 열린 것 중에 현재 열린 괄호는 (  -> 괄호삭제 ["("]
# 4. ) 괄호가 닫혔다! 그러면 아까 열린 것 중에 현재 열린 괄호는 -> 괄호삭제 []
# 5. ( 괄호가 열림 ["("]
# 6. ) 괄호가 닫혔다! 그러면 아까 열린 것 중에 현재 열린 괄호는 -> []


#((()
# 1. ( 괄호열림 -> ["("]
# 2. ( ( 괄호열림 -> ["(","("]
# 3. ( ( ( 괄호열림 -> ["(","(","("]
# 3. ) 괄호가 닫혔다! 그러면 아까 열린 것 중에 현재 열린 괄호는(( -> ["(", "("]

# 아이디어
# 바로 직전에 열린괄호가 있는지 -> 열린 괄호를 보고 현재 열려있는게 있으면 닫아버리면됨
# 열린괄호를 계속해서 저장해놓는다.
# 바로 직전에 조회한 괄호를 저장해야한다 -> 스택

# 열린게 있으면 스택에 저장, 닫히면 스택에서 빼기 -> 모든문자열이 끝났는데 스택남아있으면 false 전부 없어졌으면 true

input = "(())()"


def is_correct_parenthesis(string):
    stack = []

    for i in range(len(string)):
        if string[i] == "(": # i번째 원소가 열린거면
            stack.append(i)  # 여기 아무런 값이 들어가도 상관없음! ( 가 들어가있는지 여부만 저장해둔것
        elif string[i] == ")": # i번째 원소가 닫힌거면
            if len(stack) == 0: # 여는거 없는데 닫는괄호나오면 false -> 여는괄호가 있어야 닫는괄호가 의미가 있음 ex) ))((
                return False
            stack.pop() # 스택에서 원소를 하나씩 제거

    if len(stack) == 0: # 스택이 비지않았으면
        return True # false
    else:
        return False


print(is_correct_parenthesis(input))